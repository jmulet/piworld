define([], function(){
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/

var latex2mac = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,12],$V2=[1,11],$V3=[1,4],$V4=[1,5],$V5=[1,6],$V6=[1,7],$V7=[1,8],$V8=[1,9],$V9=[1,10],$Va=[1,13],$Vb=[1,14],$Vc=[1,15],$Vd=[1,16],$Ve=[1,17],$Vf=[1,18],$Vg=[1,19],$Vh=[1,20],$Vi=[1,21],$Vj=[1,22],$Vk=[1,23],$Vl=[1,24],$Vm=[1,25],$Vn=[1,26],$Vo=[1,27],$Vp=[1,28],$Vq=[1,30],$Vr=[1,31],$Vs=[1,32],$Vt=[1,33],$Vu=[1,34],$Vv=[1,35],$Vw=[1,36],$Vx=[1,38],$Vy=[1,39],$Vz=[1,40],$VA=[1,41],$VB=[1,42],$VC=[1,43],$VD=[1,44],$VE=[1,45],$VF=[1,46],$VG=[5,6,7,8,9,10,13,15,18,22,24,27,29,39,41,42,43,44,45,46,47,48],$VH=[5,13,15,24,27,29],$VI=[5,6,7,8,9,10,13,15,17,24,27,29,39,40,41,42,43,44,45,46,47,48,49],$VJ=[5,6,7,8,9,10,11,13,15,17,18,24,27,29,39,40,41,42,43,44,45,46,47,48,49],$VK=[5,13,15,24,27,29,39,40,41,42,43,44,45,46,47,48,49],$VL=[5,6,7,13,15,24,27,29,39,40,41,42,43,44,45,46,47,48,49],$VM=[2,12],$VN=[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53],$VO=[2,22];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"e":4,"EOF":5,"ADD":6,"SUB":7,"MUL":8,"DIV":9,"MOD":10,"SQRT":11,"LSQUARE":12,"RSQUARE":13,"LCURLY":14,"RCURLY":15,"NROOT":16,"FRAC":17,"POW":18,"LN":19,"LOG10":20,"LOGBASE":21,"SPACE":22,"LPAREN":23,"RPAREN":24,"ABS":25,"LFLOOR":26,"RFLOOR":27,"LCEIL":28,"RCEIL":29,"SIN":30,"COS":31,"TAN":32,"ARCSIN":33,"ARCCOS":34,"ARCTAN":35,"CSC":36,"SEC":37,"COT":38,"IFTHEN":39,"NOT":40,"AND":41,"OR":42,"EQUAL":43,"NOT_EQUAL":44,"LT":45,"GT":46,"GREAT_EQ":47,"LESS_EQ":48,"SUM":49,"SUBSCRIPT":50,"CONST":51,"NUMBER":52,"VAR":53,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"ADD",7:"SUB",8:"MUL",9:"DIV",10:"MOD",11:"SQRT",12:"LSQUARE",13:"RSQUARE",14:"LCURLY",15:"RCURLY",16:"NROOT",17:"FRAC",18:"POW",19:"LN",20:"LOG10",21:"LOGBASE",22:"SPACE",23:"LPAREN",24:"RPAREN",25:"ABS",26:"LFLOOR",27:"RFLOOR",28:"LCEIL",29:"RCEIL",30:"SIN",31:"COS",32:"TAN",33:"ARCSIN",34:"ARCCOS",35:"ARCTAN",36:"CSC",37:"SEC",38:"COT",39:"IFTHEN",40:"NOT",41:"AND",42:"OR",43:"EQUAL",44:"NOT_EQUAL",45:"LT",46:"GT",47:"GREAT_EQ",48:"LESS_EQ",49:"SUM",50:"SUBSCRIPT",51:"CONST",52:"NUMBER",53:"VAR"},
productions_: [0,[3,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,7],[4,4],[4,2],[4,3],[4,3],[4,3],[4,2],[4,2],[4,3],[4,3],[4,2],[4,5],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,3],[4,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,6],[4,1],[4,1],[4,1],[4,2],[4,2],[4,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
this.$ = doAdd($$[$0-2],$$[$0]);
break;
case 3:
this.$ = doSub($$[$0-2],$$[$0]);
break;
case 4: case 16:
this.$ = doMul($$[$0-2],$$[$0]);
break;
case 5:
this.$ = doDiv($$[$0-2],$$[$0]);
break;
case 6:
this.$ = doMod($$[$0-2],$$[$0]);
break;
case 7:
this.$ = doNRoot($$[$0-4],$$[$0-1]);
break;
case 8:
this.$ = doSqrt($$[$0-1]);
break;
case 9:
this.$ = doSqrt($$[$0]);
break;
case 10:
this.$ = doNRoot($$[$0-1], $$[$0]);
break;
case 11:
this.$ = doDiv($$[$0-1],$$[$0]);
break;
case 12:
this.$ = doPow($$[$0-2],$$[$0]);
break;
case 13:
this.$ = doLn($$[$0]);
break;
case 14:
this.$ = doLog10($$[$0]);
break;
case 15:
this.$ = doLogBase($$[$0-1],$$[$0]);
break;
case 17: case 48: case 50:
this.$ = doMul($$[$0-1],$$[$0]);
break;
case 18:
this.$ = doParen($$[$0-2]);
break;
case 19:
this.$ = doAbs($$[$0-1]);
break;
case 20:
this.$ = doParen($$[$0-1]);
break;
case 21:
this.$ = doCurly($$[$0-1]);
break;
case 22:
this.$ = doSquare($$[$0-1]);
break;
case 23:
this.$ = doFloor($$[$0-1]);
break;
case 24:
this.$ = doCeil($$[$0-1]);
break;
case 25:
this.$ = doSin($$[$0]);
break;
case 26:
this.$ = doCos($$[$0]);
break;
case 27:
this.$ = doTan($$[$0]);
break;
case 28:
this.$ = doArcSin($$[$0]);
break;
case 29:
this.$ = doArcCos($$[$0]);
break;
case 30:
this.$ = doArcTan($$[$0]);
break;
case 31:
this.$ = doCsc($$[$0]);
break;
case 32:
this.$ = doSec($$[$0]);
break;
case 33:
this.$ = doCot($$[$0]);
break;
case 34:
this.$ = doIfThen($$[$0-2],$$[$0]);
break;
case 35:
this.$ = doNot($$[$0]);
break;
case 36:
this.$ = doAnd($$[$0-2],$$[$0]);
break;
case 37:
this.$ = doOr($$[$0-2],$$[$0]);
break;
case 38:
this.$ = doEqual($$[$0-2],$$[$0]);
break;
case 39:
this.$ = doNotEqual($$[$0-2],$$[$0]);
break;
case 40:
this.$ = doLess($$[$0-2],$$[$0]);
break;
case 41:
this.$ = doGreater($$[$0-2],$$[$0]);
break;
case 42:
this.$ = doGreaterEq($$[$0-2],$$[$0]);
break;
case 43:
this.$ = doLessEq($$[$0-2],$$[$0]);
break;
case 44:
this.$ = doSum($$[$0],$$[$0-3],$$[$0-1]);
break;
case 45:
this.$ = doConst(yytext); 
break;
case 46:
this.$ = doNumber(yytext); 
break;
case 47:
this.$ = doVar(yytext); 
break;
case 49:
this.$ = doMul(doConst($$[$0-1]),$$[$0]);
break;
}
},
table: [{3:1,4:2,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{1:[3]},{4:37,5:[1,29],6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:49,11:$V0,12:[1,47],14:[1,48],16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:50,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:51,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:52,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:53,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:54,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:56,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,22:[1,55],23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:57,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:58,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:59,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:60,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:61,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:62,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:63,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:64,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:65,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:66,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:67,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:68,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:69,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:70,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:71,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{50:[1,72]},o($VG,[2,45],{4:73,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp}),o([5,6,7,8,9,10,11,13,15,17,18,19,20,21,22,24,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52],[2,46],{4:74,12:$V1,14:$V2,16:$V3,23:$V8,25:$V9,26:$Va,28:$Vb,51:$Vn,53:$Vp}),o($VG,[2,47],{4:75,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp}),{1:[2,1]},{4:76,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:77,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:78,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:79,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:80,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:81,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:82,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},o($VH,[2,17],{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp}),{4:83,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:84,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:85,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:86,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:87,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:88,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:89,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:90,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:91,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:92,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:93,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},o($VI,[2,9],{4:37,11:$V0,12:$V1,14:$V2,16:$V3,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),{4:94,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:95,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp},o($VJ,[2,13],{4:37,12:$V1,14:$V2,16:$V3,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VJ,[2,14],{4:37,12:$V1,14:$V2,16:$V3,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),{4:96,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:97,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,24:[1,98],25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:[1,99],26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,15:[1,100],16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,13:[1,101],14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,27:[1,102],28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,29:[1,103],30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp},o($VJ,[2,25],{4:37,12:$V1,14:$V2,16:$V3,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VJ,[2,26],{4:37,12:$V1,14:$V2,16:$V3,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VJ,[2,27],{4:37,12:$V1,14:$V2,16:$V3,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VJ,[2,28],{4:37,12:$V1,14:$V2,16:$V3,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VJ,[2,29],{4:37,12:$V1,14:$V2,16:$V3,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VJ,[2,30],{4:37,12:$V1,14:$V2,16:$V3,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VJ,[2,31],{4:37,12:$V1,14:$V2,16:$V3,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VJ,[2,32],{4:37,12:$V1,14:$V2,16:$V3,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VJ,[2,33],{4:37,12:$V1,14:$V2,16:$V3,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VK,[2,35],{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),{4:104,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},o($VH,[2,49],{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp}),o([5,6,7,8,9,10,11,13,15,17,18,19,20,21,24,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52],[2,48],{4:37,12:$V1,14:$V2,16:$V3,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,51:$Vn,53:$Vp}),o($VH,[2,50],{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp}),o($VL,[2,2],{4:37,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VL,[2,3],{4:37,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VI,[2,4],{4:37,11:$V0,12:$V1,14:$V2,16:$V3,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VI,[2,5],{4:37,11:$V0,12:$V1,14:$V2,16:$V3,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VI,[2,6],{4:37,11:$V0,12:$V1,14:$V2,16:$V3,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VI,$VM,{4:37,11:$V0,12:$V1,14:$V2,16:$V3,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VH,[2,16],{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp}),o([5,13,15,24,27,29,39,49],[2,34],{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,51:$Vn,52:$Vo,53:$Vp}),o($VK,[2,36],{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VK,[2,37],{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VK,[2,38],{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VK,[2,39],{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VK,[2,40],{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VK,[2,41],{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VK,[2,42],{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VK,[2,43],{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,13:[1,105],14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,15:[1,106],16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp},o($VH,[2,10],{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp}),o($VI,[2,11],{4:37,11:$V0,12:$V1,14:$V2,16:$V3,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),o($VJ,[2,15],{4:37,12:$V1,14:$V2,16:$V3,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:[1,107],23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp},o($VN,[2,20]),o($VG,[2,19],{4:57,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp}),o($VN,[2,21]),o($VN,$VO),o($VN,[2,23]),o($VN,[2,24]),{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:[1,108],19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp},o([5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53],$VO,{14:[1,109]}),o($VN,[2,8]),{4:82,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,24:[1,110],25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:111,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},{4:112,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,19:$V5,20:$V6,21:$V7,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,40:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp},o($VN,[2,18]),o([6,7,8,9,10,17,39,40,41,42,43,44,45,46,47,48,49],$VM,{4:113,11:$V0,12:$V1,14:$V2,16:$V3,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,51:$Vn,52:$Vo,53:$Vp}),{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,15:[1,114],16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$Vm,51:$Vn,52:$Vo,53:$Vp},o([5,13,15,24,27,29,49],[2,44],{4:37,6:$Vq,7:$Vr,8:$Vs,9:$Vt,10:$Vu,11:$V0,12:$V1,14:$V2,16:$V3,17:$V4,18:$Vv,19:$V5,20:$V6,21:$V7,22:$Vw,23:$V8,25:$V9,26:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vx,40:$Vl,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,51:$Vn,52:$Vo,53:$Vp}),o($VN,[2,7])],
defaultActions: {29:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
  // Number parsing
  doNumber = function(a){return parseFloat(a);};
  // Basic operators
  doAdd = function(a,b){return a+'+'+b;};
  doSub = function(a,b){return a+'-'+b;};
  doMul = function(a,b){return a+'*'+b;};
  doDiv = function(a,b){return a+'/'+b;};
  doPow = function(a,b){return '('+a+')^('+b+')';};
  doMod = function(a,b){return 'mod('+a+','+b+')';};
  doSqrt = function(a){return 'sqrt('+a+')';};
  doNRoot = function(a,b){return '('+b+')^(1/'+a+')';};
  doLn = function(a){return 'log('+a+')';};
  doLog10 = function(a){return '(log('+a+')/log(10))';};
  doLogBase = function(a,b){return '(log('+b+')/log('+a+'))';};
  // Brackets
  doParen = function(a){return '('+a+')';};
  doCurly = function(a){return '('+a+')';};
  doSquare = function(a){return '('+a+')';};
  doFloor = function(a){return 'floor('+a+')';};
  doCeil = function(a){return 'round('+a+')';};
  doAbs = function(a){return 'abs('+a+')';};
  // Trig
  doSin = function(a){return 'sin('+a+')';};
  doCos = function(a){return 'cos('+a+')';};
  doTan = function(a){return 'tan('+a+')';};
  doArcSin = function(a){return 'asin('+a+')';};
  doArcCos = function(a){return 'acos('+a+')';};
  doArcTan = function(a){return 'atan('+a+')';};
  doCsc = function(a){return '(1/sin('+a+'))';};
  doSec = function(a){return '(1/cos('+a+'))';};
  doCot = function(a){return '(1/tan('+a+'))';};
  // Logic
  doNot = function(a){ return '!'+a;};
  doAnd = function(a,b){ return a+'&&'+b;};
  doOr = function(a,b){ return a+'||'+b;};
  doIfThen = function(a,b){ return 'if('+a+'){'+b+';}'; };
  doEqual = function(a,b){ return a +'='+ b; }; // need fixing for logical test
  doNotEqual = function(a,b){ return a+'!='+b; };
  doLess = function(a,b){ return a+'<'+b; };
  doGreater = function(a,b){ return a+'>'+b; };
  doLessEq = function(a,b){ return a+'<='+b; };
  doGreaterEq = function(a,b){ return a+'>='+b; };
  // Summations

  // Constants:
  doConst = function(a){
     if( a === 'e' || a === '\\e' ){return '%e';}
    if( a === '\\pi' || a === '\pi' ){ return '%pi';}
    return a;
  };
  // Symbols (ie variables)
  doVar = function(a){
    if( a.indexOf('\\') === 0 ){
      return a.slice(1);
    }
    // Other ie x or y or froggie
    return a;
  };

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 52; 
break;
case 1: return 51; 
break;
case 2: return 51; 
break;
case 3: return 51; 
break;
case 4: return 53; 
break;
case 5: return 53; 
break;
case 6: return 53; 
break;
case 7: return 53; 
break;
case 8: return 53; 
break;
case 9: return 53; 
break;
case 10: return 53; 
break;
case 11: return 53; 
break;
case 12: return 53; 
break;
case 13: return 53; 
break;
case 14: return 53; 
break;
case 15: return 53; 
break;
case 16: return 53; 
break;
case 17: return 53; 
break;
case 18: return 53; 
break;
case 19: return 53; 
break;
case 20: return 53; 
break;
case 21: return 53; 
break;
case 22: return 53; 
break;
case 23: return 53; 
break;
case 24: return 53; 
break;
case 25: return 53; 
break;
case 26: return 53; 
break;
case 27: return 53; 
break;
case 28: return 53; 
break;
case 29: return 53; 
break;
case 30: return 53; 
break;
case 31: return 53; 
break;
case 32: return 53; 
break;
case 33: return 53; 
break;
case 34: return 53; 
break;
case 35: return 53; 
break;
case 36: return 53; 
break;
case 37: return 53; 
break;
case 38: return 53; 
break;
case 39: return 53; 
break;
case 40: return 53; 
break;
case 41: return 53; 
break;
case 42: return 53; 
break;
case 43: return 53; 
break;
case 44: return 6; 
break;
case 45: return 7; 
break;
case 46: return 'ADDSUB'; 
break;
case 47: return 8; 
break;
case 48: return 8; 
break;
case 49: return 8; 
break;
case 50: return 9; 
break;
case 51: return 9; 
break;
case 52: return 17; 
break;
case 53: return 10; 
break;
case 54: return 11; 
break;
case 55: return 18; 
break;
case 56: return 19; 
break;
case 57: return 21; 
break;
case 58: return 20; 
break;
case 59: return 30; 
break;
case 60: return 31; 
break;
case 61: return 32; 
break;
case 62: return 33; 
break;
case 63: return 34; 
break;
case 64: return 35; 
break;
case 65: return 36; 
break;
case 66: return 37; 
break;
case 67: return 38; 
break;
case 68: return 'MAGNITUDE'; 
break;
case 69: return 25; 
break;
case 70: return 23; 
break;
case 71: return 14; 
break;
case 72: return 12; 
break;
case 73: return 28; 
break;
case 74: return 26; 
break;
case 75: return 24; 
break;
case 76: return 15; 
break;
case 77: return 13; 
break;
case 78: return 29; 
break;
case 79: return 27; 
break;
case 80:  
break;
case 81:  
break;
case 82:return 40;
break;
case 83:return 41;
break;
case 84:return 42;
break;
case 85:return 39;
break;
case 86:return 39;
break;
case 87:return 39;
break;
case 88:return 39;
break;
case 89:return 43;
break;
case 90:return 43;
break;
case 91:return 44;
break;
case 92:return 'LESS_EQUAL';
break;
case 93:return 'LESS_EQUAL';
break;
case 94:return 45;
break;
case 95:return 'GREAT_EQUAL';
break;
case 96:return 'GREAT_EQUAL';
break;
case 97:return 46;
break;
case 98:return 'UNDERSCORE';
break;
case 99:return 49;
break;
case 100:  
break;
case 101: 
break;
case 102: return 5; 
break;
}
},
rules: [/^(?:([0-9]*\.{0,1}[0-9]+))/,/^(?:(e))/,/^(?:(\\e))/,/^(?:(\\pi))/,/^(?:([a-zA-Z]))/,/^(?:(\\alpha))/,/^(?:(\\beta))/,/^(?:(\\chi))/,/^(?:(\\delta))/,/^(?:(\\epsilon))/,/^(?:(\\varepsilon))/,/^(?:(\\eta))/,/^(?:(\\gamma))/,/^(?:(\\iota))/,/^(?:(\\kappa))/,/^(?:(\\lambda))/,/^(?:(\\mu))/,/^(?:(\\nu))/,/^(?:(\\omega))/,/^(?:(\\phi))/,/^(?:(\\varphi))/,/^(?:(\\psi))/,/^(?:(\\rho))/,/^(?:(\\sigma))/,/^(?:(\\tau))/,/^(?:(\\theta))/,/^(?:(\\upsilon))/,/^(?:(\\xi))/,/^(?:(\\zeta))/,/^(?:(\\Delta))/,/^(?:(\\Gamma))/,/^(?:(\\Lambda))/,/^(?:(\\Omega))/,/^(?:(\\Phi))/,/^(?:(\\Pi))/,/^(?:(\\Psi))/,/^(?:(\\Sigma))/,/^(?:(\\Theta))/,/^(?:(\\Upsilon))/,/^(?:(\\Xi))/,/^(?:(\\aleph))/,/^(?:(\\beth))/,/^(?:(\\daleth))/,/^(?:(\\gimel))/,/^(?:(\+))/,/^(?:(-))/,/^(?:(\\pm))/,/^(?:(\*))/,/^(?:(\\times))/,/^(?:(\\cdot))/,/^(?:(\/))/,/^(?:(\\div))/,/^(?:(\\frac))/,/^(?:(\\mod))/,/^(?:(\\sqrt))/,/^(?:(\^))/,/^(?:(\\ln))/,/^(?:(\\log_))/,/^(?:(\\log))/,/^(?:(\\sin))/,/^(?:(\\cos))/,/^(?:(\\tan))/,/^(?:(\\arcsin))/,/^(?:(\\arccos))/,/^(?:(\\arctan))/,/^(?:(\\csc))/,/^(?:(\\sec))/,/^(?:(\\cot))/,/^(?:(\|\|))/,/^(?:(\|))/,/^(?:(\())/,/^(?:(\{))/,/^(?:(\[))/,/^(?:(\\lceil))/,/^(?:(\\lfloor))/,/^(?:(\)))/,/^(?:(\}))/,/^(?:(\]))/,/^(?:(\\rceil))/,/^(?:(\\rfloor))/,/^(?:(\\left))/,/^(?:(\\right))/,/^(?:(\\sim))/,/^(?:(\\wedge))/,/^(?:(\\vee))/,/^(?:(\\to))/,/^(?:(\\leftrightarrow))/,/^(?:(\\Rightarrow))/,/^(?:(\\Leftrightarrow))/,/^(?:(=))/,/^(?:(\\equiv))/,/^(?:(\\ne))/,/^(?:(\\le))/,/^(?:(<=))/,/^(?:(<))/,/^(?:(\\ge))/,/^(?:(>=))/,/^(?:(>))/,/^(?:(_))/,/^(?:(\\sum))/,/^(?:(\$))/,/^(?:(\s+))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


return latex2mac;
});